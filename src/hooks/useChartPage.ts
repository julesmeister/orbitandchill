/* eslint-disable @typescript-eslint/no-unused-vars */
import { useState, useEffect, useRef } from 'react';
import { useRouter } from 'next/navigation';
import { useUserStore } from '../store/userStore';
import { usePeopleStore } from '../store/peopleStore';
import { useChartTab } from '../store/chartStore';
import { useNatalChart } from './useNatalChart';
import { useStatusToast } from './useStatusToast';
import { Person } from '../types/people';
import { trackChartGenerated, trackPageView } from '../utils/analytics';
import { BRAND } from '../config/brand';

export const useChartPage = () => {
  const router = useRouter();
  const { user, isProfileComplete, isLoading: isUserLoading, loadProfile } = useUserStore();
  const { setSelectedPerson: setGlobalSelectedPerson, selectedPerson: globalSelectedPerson } = usePeopleStore();
  const { activeTab, setActiveTab } = useChartTab();
  
  // Local state
  const [selectedPerson, setSelectedPerson] = useState<Person | null>(null);
  
  // Use global selected person if available, otherwise fall back to local state
  const activeSelectedPerson = globalSelectedPerson || selectedPerson;
  
  // Chart management
  const {
    generateChart,
    isGenerating,
    cachedChart,
    shareChart,
    getUserCharts,
    hasExistingChart,
    isLoadingCache,
  } = useNatalChart(activeSelectedPerson);
  
  // Status toast management
  const { toast: statusToast, showSuccess, showError, hideStatus } = useStatusToast();
  
  // Create refs for stable function references
  const generateChartRef = useRef(generateChart);
  const getUserChartsRef = useRef(getUserCharts);
  
  // Update refs when functions change
  useEffect(() => {
    generateChartRef.current = generateChart;
    getUserChartsRef.current = getUserCharts;
  }, [generateChart, getUserCharts]);
  
  // Load user profile when component mounts
  useEffect(() => {
    if (!user && !isUserLoading) {
      loadProfile();
    }
  }, [user, isUserLoading, loadProfile]);
  
  // Check for existing charts and auto-generate if needed
  useEffect(() => {
    if (isLoadingCache || cachedChart || isGenerating || !user) {
      return;
    }
    
    const loadOrGenerateChart = async () => {
      if (isGenerating) return;
      
      try {
        const existingCharts = await getUserChartsRef.current();
        if (existingCharts.length > 0) {
          return;
        }
      } catch (error) {
        // Continue to generation if loading fails
      }
      
      if (user.birthData?.dateOfBirth && user.birthData?.timeOfBirth && user.birthData?.coordinates?.lat) {
        try {
          await generateChartRef.current({
            name: user.username || '',
            dateOfBirth: user.birthData.dateOfBirth,
            timeOfBirth: user.birthData.timeOfBirth,
            locationOfBirth: user.birthData.locationOfBirth || 'Unknown',
            coordinates: user.birthData.coordinates
          });
          
          trackChartGenerated('natal', {
            isAutoGenerated: true,
            hasCompleteProfile: !!(user.birthData?.dateOfBirth && user.birthData?.timeOfBirth && user.birthData?.coordinates?.lat)
          });
        } catch (error) {
          // Error generating chart
        }
      }
    };
    
    loadOrGenerateChart();
  }, [cachedChart, isGenerating, user?.id, user?.birthData?.dateOfBirth, user?.birthData?.timeOfBirth, user?.birthData?.coordinates?.lat]);
  
  // Track page view analytics
  useEffect(() => {
    trackPageView('/chart');
  }, []);
  
  // Handler functions
  const handleClearAllCaches = async () => {
    if (!user) return;
    
    try {
      await handleRegenerateChart();
      showSuccess('Chart Regenerated', 'Your natal chart has been successfully regenerated with fresh calculations.', 4000);
    } catch (error) {
      showError('Regeneration Failed', 'Failed to regenerate your chart. Please try again.', 5000);
    }
  };
  
  const handleRegenerateChart = async () => {
    const personToUse = selectedPerson || (user?.birthData ? {
      name: user.username || "",
      birthData: user.birthData
    } : null);
    
    if (!personToUse?.birthData) {
      alert("No birth data available. Please select a person or add your birth data.");
      return;
    }
    
    try {
      const chartData = await generateChart(
        {
          name: personToUse.name || "",
          dateOfBirth: personToUse.birthData.dateOfBirth,
          timeOfBirth: personToUse.birthData.timeOfBirth,
          locationOfBirth: personToUse.birthData.locationOfBirth,
          coordinates: personToUse.birthData.coordinates,
        },
        true // forceRegenerate
      );
      
      trackChartGenerated('natal', {
        isRegeneration: true,
        personName: personToUse.name
      });
      
      if (chartData) {
        // Chart regenerated successfully
      }
    } catch (error) {
      alert("Failed to regenerate chart. Please try again.");
    }
  };
  
  const handlePersonChange = async (person: Person | null) => {
    setSelectedPerson(person);
    setGlobalSelectedPerson(person?.id || null);
    
    if (person?.birthData && user && !cachedChart) {
      try {
        await generateChart({
          name: person.name || "",
          dateOfBirth: person.birthData.dateOfBirth,
          timeOfBirth: person.birthData.timeOfBirth,
          locationOfBirth: person.birthData.locationOfBirth,
          coordinates: person.birthData.coordinates,
        });
      } catch (error) {
        // Error generating chart for selected person
      }
    }
  };
  
  const handleAddPersonClick = () => {
    // This is now handled by ChartQuickActions component
  };
  
  const handleShare = async () => {
    if (cachedChart?.id) {
      const shareUrl = await shareChart(cachedChart.id);
      if (shareUrl) {
        if (navigator.share) {
          try {
            await navigator.share({
              title: `${cachedChart.metadata?.name || 'My'} Natal Chart`,
              text: `Check out ${cachedChart.metadata?.name || 'my'} natal chart from ${BRAND.name}!`,
              url: shareUrl,
            });
          } catch {
            await navigator.clipboard.writeText(shareUrl);
            showSuccess('Link Copied', 'Chart share link copied to clipboard.', 3000);
          }
        } else {
          await navigator.clipboard.writeText(shareUrl);
          showSuccess('Link Copied', 'Chart share link copied to clipboard.', 3000);
        }
      }
    }
  };
  
  // Computed values for UI
  const isLoading = isUserLoading || (isLoadingCache && hasExistingChart) || isGenerating || !user;
  
  const personToShow = selectedPerson || (user?.birthData ? {
    name: user.username || "",
    birthData: user.birthData
  } : null);
  
  const birthDataToShow = cachedChart?.metadata?.birthData || personToShow?.birthData;
  
  const loadingTitle = isUserLoading ? 'Loading Your Profile' :
    isGenerating ? 'Generating Your Chart' :
    'Loading Your Chart';
  
  const loadingDescription = isUserLoading ? 'Retrieving your birth data and preferences...' :
    isGenerating ? 'Creating your cosmic blueprint from the stars...' :
    'We\'re retrieving your cosmic blueprint. This should only take a moment...';
  
  return {
    // State
    router,
    user,
    selectedPerson,
    activeSelectedPerson,
    activeTab,
    cachedChart,
    personToShow,
    birthDataToShow,
    statusToast,
    
    // Loading states
    isLoading,
    isGenerating,
    loadingTitle,
    loadingDescription,
    
    // Handlers
    handleClearAllCaches,
    handleRegenerateChart,
    handlePersonChange,
    handleAddPersonClick,
    handleShare,
    hideStatus,
    setActiveTab,
  };
};